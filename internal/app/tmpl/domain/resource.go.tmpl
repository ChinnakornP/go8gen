package {{ .DomainLowerCase }}

import (
	"time"

	"github.com/jinzhu/copier"
	"github.com/jinzhu/now"
	"github.com/volatiletech/null/v8"

	"{{ .ModuleName }}/internal/models"
	"{{ .ModuleName }}/internal/utility/filter"
)

type Request struct {
	{{ .Domain }}ID        string `json:"-"`
	Title         string `json:"title" validate:"required"`
	PublishedDate string `json:"published_date" validate:"required"`
	ImageURL      string `json:"image_url" validate:"url"`
	Description   string `json:"description" validate:"required"`
	filter.Filter
}

type Res struct {
	{{ .Domain }}ID        int64       `json:"{{ .DomainLowerCase }}_id" deepcopier:"field:{{ .DomainLowerCase }}_id" db:"id"`
	Title         string      `json:"title" deepcopier:"field:title" db:"title"`
	PublishedDate time.Time   `json:"published_date" deepcopier:"field:force" db:"published_date"`
	ImageURL      null.String `json:"image_url" deepcopier:"field:image_url" db:"image_url"`
	Description   null.String `json:"description" deepcopier:"field:description"`
}

func To{{ .Domain }}(req *Request) *models.{{ .Domain }} {
	return &models.{{ .Domain }}{
		Title:         req.Title,
		PublishedDate: now.MustParse(req.PublishedDate),
		ImageURL: null.String{
			String: req.ImageURL,
			Valid:  true,
		},
		Description: req.Description,
	}
}

func Resource({{ .DomainLowerCase }} *models.{{ .Domain }}) (Res, error) {
	var resource Res

	err := copier.Copy(&resource, &{{ .DomainLowerCase }})
	if err != nil {
		return resource, err
	}

	return resource, nil
}

func Resources({{ .DomainLowerCase }}s []*models.{{ .Domain }}) (interface{}, error) {
	if len({{ .DomainLowerCase }}s) == 0 {
		return make([]string, 0), nil
	}

	var resources []Res
	for _, {{ .DomainLowerCase }} := range {{ .DomainLowerCase }}s {
		res, _ := Resource({{ .DomainLowerCase }})
		resources = append(resources, res)
	}
	return resources, nil
}
