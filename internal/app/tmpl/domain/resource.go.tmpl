package {{ .DomainLowerCase }}

import (
	"github.com/jinzhu/copier"

	"{{ .ModuleName }}/internal/models"
)

type Res struct {
	{{ .Domain }}ID        uint64       `json:"id" deepcopier:"field:id"`
	// FieldName         string      `json:"field_name" deepcopier:"field:field_name"`
}

type T struct {
	Data interface{} `json:"data"`
	Meta Meta        `json:"meta,omitempty"`
}

type Meta struct {
	Size  int   `json:"size,omitempty"`
	Total int64 `json:"total,omitempty"`
}

func Resource({{ .DomainLowerCase }} *models.{{ .Domain }}) (Res, error) {
	var resource Res

	err := copier.Copy(&resource, &{{ .DomainLowerCase }})
	if err != nil {
		return resource, err
	}

	return resource, nil
}

func Resources({{ .DomainLowerCase }}s []*models.{{ .Domain }}) ([]Res, error) {
	if len({{ .DomainLowerCase }}s) == 0 {
		return make([]Res, 0), nil
	}

	var resources []Res
	for _, {{ .DomainLowerCase }} := range {{ .DomainLowerCase }}s {
		res, _ := Resource({{ .DomainLowerCase }})
		resources = append(resources, res)
	}
	return resources, nil
}
