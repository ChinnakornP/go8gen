package usecase

import (
	"context"

	"{{ .ModuleName }}/internal/domain/{{ .DomainLowerCase }}"
	"{{ .ModuleName }}/internal/models"

)

type useCase struct {
	repo {{ .DomainLowerCase }}.Repository
}

func New(repo {{ .DomainLowerCase }}.Repository) *useCase {
	return &useCase {
		repo: repo,
	}
}

func (u *useCase) Create(ctx context.Context, r {{ .DomainLowerCase }}.Request) (*models.{{ .Domain }}, error) {
	dto := {{ .DomainLowerCase }}.To{{ .Domain }}(&r)
	{{ .DomainLowerCase }}ID, err := u.repo.Create(ctx, dto)
	if err != nil {
		return nil, err
	}
	{{ .DomainLowerCase }}Found, err := u.repo.Read(ctx, {{
.DomainLowerCase }}ID)
	if err != nil {
		return nil, err
	}

	return {{ .DomainLowerCase }}Found, nil
}

func (u *useCase) List(ctx context.Context, f *{{ .DomainLowerCase }}.Filter) ([]*models.{{ .Domain }}, error) {
	return u.repo.List(ctx, f)
}

func (u *useCase) Read(ctx context.Context, {{ .DomainLowerCase }}ID uint64) (*models.{{.Domain}}, error) {
	return u.repo.Read(ctx, {{ .DomainLowerCase }}ID)
}

func (u *useCase) Update(ctx context.Context, {{ .DomainLowerCase }} *models.{{ .Domain }}) (*models.{{ .Domain }}, error) {
	err := u.repo.Update(ctx, {{ .DomainLowerCase }})
	if err != nil {
		return nil, err
	}
	return u.repo.Read(ctx, {{ .DomainLowerCase }}.ID)
}

func (u *useCase) Delete(ctx context.Context, {{ .DomainLowerCase }}ID uint64) error {
	return u.repo.Delete(ctx, {{ .DomainLowerCase }}ID)
}
