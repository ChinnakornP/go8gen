package postgres

import (
	"context"

	"github.com/jmoiron/sqlx"

	"{{ .ModuleName }}/internal/domain/{{ .DomainLowerCase }}"
	"{{ .ModuleName }}/internal/models"
)

type Repository interface {
	Create(ctx context.Context, {{ .Domain }} *models.{{ .Domain }}) (uint64, error)
	CreateRead(ctx context.Context, {{ .Domain }} *models.{{ .Domain }}) (*models.{{ .Domain }}, error)
	List(ctx context.Context, f *Filter) ([]*models.{{ .Domain }}, error)
	Read(ctx context.Context, {{ .DomainLowerCase }}ID uint64) (*models.{{ .Domain }}, error)
	Update(ctx context.Context, {{ .DomainLowerCase }} *models.{{ .Domain }}) error
	Delete(ctx context.Context, {{ .DomainLowerCase }}ID uint64) error
}

type repository struct {
	db *sqlx.DB
}

func New(db *sqlx.DB) *repository {
	return &repository{db: db}
}

func (r *repository) Create(ctx context.Context, {{ .DomainLowerCase }} *models.{{ .Domain }})(uint64, error) {
    panic("implement me")
}

func (r *repository) List(ctx context.Context, f *{{ .DomainLowerCase }}.Filter) ([]*models.{{.Domain }}, error) {
	panic("implement me")
}

func (r *repository) Read(ctx context.Context, {{ .DomainLowerCase }}ID uint64) (*models.{{.Domain}}, error) {
	panic("implement me")
}

func (r *repository) Update(ctx context.Context, {{ .DomainLowerCase }} *models.{{ .Domain }}) error {
	panic("implement me")
}

func (r *repository) Delete(ctx context.Context, {{ .DomainLowerCase }}ID uint64) error {
	panic("implement me")
}
