package resource

import (
	"reflect"
	"time"

	"github.com/jinzhu/copier"
	"github.com/volatiletech/null/v8"
)

type {{ .Domain }}Request struct {
	Title         string `json:"title" validate:"required"`
	PublishedDate string `json:"published_date" validate:"required"`
	ImageURL      string `json:"image_url" validate:"url"`
	Description   string `json:"description" validate:"required"`
}

type {{ .Domain }}Resource struct {
	{{ .Domain }}ID        int64       `json:"{{ .DomainLowerCase }}_id" deepcopier:"field:{{ .DomainLowerCase }}_id" db:"id"`
	Title         string      `json:"title" deepcopier:"field:title" db:"title"`
	PublishedDate time.Time   `json:"published_date" deepcopier:"field:force" db:"published_date"`
	ImageURL      null.String `json:"image_url" deepcopier:"field:image_url" db:"image_url"`
	Description   null.String `json:"description" deepcopier:"field:description"`
}

type {{ .Domain }}DB struct {
	{{ .Domain }}ID        int64       `db:"{{ .DomainLowerCase }}_id"`
	Title         string      `db:"title"`
	PublishedDate time.Time   `db:"published_date"`
	ImageURL      null.String `db:"image_url"`
	Description   null.String `db:"description"`
	CreatedAt     null.Time   `db:"created_at"`
	UpdatedAt     null.Time   `db:"updated_at"`
	DeletedAt     null.Time   `db:"deleted_at"`
}

func {{ .Domain }}({{ .DomainLowerCase }} {{ .Domain }}DB) ({{ .Domain }}Resource, error) {
	var resource {{ .Domain }}Resource

	err := copier.Copy(&resource, &{{ .DomainLowerCase }})
	if err != nil {
		return resource, err
	}

	return resource, nil
}

func {{ .Domain }}s({{ .DomainLowerCase }}s []{{ .Domain }}DB) (interface{}, error) {
	var resource {{ .Domain }}Resource

	rt := reflect.TypeOf({{ .DomainLowerCase }}s)
	if rt.Kind() == reflect.Slice {
		var resources []{{ .Domain }}Resource
		for _, {{ .DomainLowerCase }} := range {{ .DomainLowerCase }}s {
			res, _ := {{ .Domain }}({{ .DomainLowerCase }})
			resources = append(resources, res)
		}
		return resources, nil
	}

	err := copier.Copy(&resource, {{ .DomainLowerCase }}s)
	if err != nil {
		return resource, err
	}

	return resource, nil
}